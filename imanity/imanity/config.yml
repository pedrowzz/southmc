# -------------------------------------------------------
# Imanity Software Â© 2019 ~ 2024
#  
# Welcome to the main configuration of ImanitySpigot3! (config.yml)
# As you can see, there's tons to configure. Some options may impact gameplay, so use
# with caution, and make sure you know what each option does before configuring.
# If you need help with the configuration or have any question related to ImanitySpigot,
# join our discord. Happy Configuration!
#  
# Discord: https://go.imanity.dev/discord
# -------------------------------------------------------

# Should the server be in compatibility mode?
# This will disable some features / optimization that may cause issues with other plugins.
compatibilityMode: false

# Automatically download and install spark profiler plugin?
# Spark: https://www.spigotmc.org/resources/spark.57242/
autoDownloadSpark: true

# Should tnt entities be hidden? (Just before they explode)
# This option can provide a significant FPS boost to your players.
hideTntEntities: false

# Should allow the server to change the weather?
weatherChange: true

# Should let the server decay the leaves of the trees?
leavesDecay: true

# Should let cactus damage entities?
cactusDamage: true

# Should players hear the sounds of other players' footsteps?
footStepSound: true

# Should allow the server to apply fish velocity to the player? Due to the vanilla bug, the fish velocity is not applied to the player. but in some cases, the velocity can still be sent to the player.
shouldApplyFishVelocityToPlayer: false

# Should allow the server to fix the mouse delay?
# By default minecraft has a weird desync for rotation between client and server,
# And it could affect some gameplay mechanics like fishing, bow shooting, pearling, potting etc.
# This fix will make sure the rotation of each action is always sync with the server.
mouseDelayFix: true

# Should interact event fix be applied?
# There is a race condition where spigot interaction fire both right click block and right click air at the same time.
# Which could cause weird issue on plugin.
interactEventFix: true

# Should allow the server to fix the ghost buckets?
# Ghost bucket was an issue where when you place a bucket of water/lava, it may land on unexpected location.
# Or sometimes client shows you placed a bucket of water/lava, but the server doesn't think so.
# This fix will make sure right clicking to always sync with the server.
ghostBucketFix: true

# The range of blocks to update when a player places a bucket of water/lava.
# This option is only useful when ghostBucketFix is enabled.
# This is a backup to ensure no ghost water/lava.
# You can disable it by either setting it to 0 or setting ghostBucketFix to false.
bucketUpdateRange: 2

# Should the server to use improved method of hit detection?
# This will make the hit detection more accurate when calculating the hit between player to player.
improvedHitDetection: true

# Should arrows ignore damage ticks?
# This will make the arrows deal damage instantly when it hits the entity,
# and it won't change damage ticks of the entity.
arrowIgnoreDamageTicks: false

# Should allow the infinity water sources?
# Can be done by placing water sources in the corners of a 2x2x1 area
# By default this is possible in minecraft only with water
infiniteWaterSource: true

# Should allow the infinity lava sources?
# Can be done by placing lava sources in the corners of a 2x2x1 area
# By default this is not possible in minecraft (possible only with water)
infiniteLavaSource: false

# This option will completely skip item stack's nbt data from reading
# For the purpose to prevent packet crasher
# This may somehow cause inconsistent behaviour for some plugin/vanilla stuff
# If you had some issue related to item, try turning this option off.
dontReadItemNBTDataFromPackets: true

# This option buffers the number of logins which will attempt to join the world per tick
# this attempts to reduce the impact that join floods has on the server
maxLoginProcessPerTick: 3

# In 1.8 durability is much lower than previous versions (1.7)
# You can here modify the damages affected to durability of items
# This can be double with '.'
# Examples: 
#    - 1 will not change anything since the damages will be multiply by 1 (no change)
#    - Choosing a number under 1 will increase the durability of the items (reduces damage)
#    - ex: 1.6 will multiply the damages by 1.6, ex: durability damage original: 8 ==> 13
#    - Choosing a number above 1 will reduce the durability of the items (increases damage)
#    - ex: 0.5 will multiply the damages by 0.5, ex: durability damage original: 8 ==> 4
#    - 0 will make items never break.
# NOTE: 
#    - Minecraft durability is Integer, that means durability is impossible to have decimal
#    - So the result of damage will be rounded, for example:
#    - 8 x 1.3 = 10.4 ==> 10
#    - 8 x 0.6 = 4.8 ==> 5
durabilityMultiplier: 1.0

# Force updating inventory / item slot to player
# whenever the final durability isn't the same as vanilla behaviour expected.
# It could caused by either durabilityMultiplier from the above or plugin changing the durability.
# While updating inventory itself is harmless, but minecraft client will stop any item action upon the update happens.
# For example eating food will be stopped, so if the player got damaged and the player is wearing armor,
# A durability update happens to the armor, it will cause the player's eating food action being cancelled,
# And the eating timer will reset, which is a bad behaviour for some servers.
forceDurabilityUpdating: true

# Should hide the IP address of the players in the console?
hideIPAddressInConsole: false

# This option will remove the red screen & death animation when a player died
# Completely remove the delay when died.

# If you are using Via-Version for 1.9+ Compatibility
# You may want to disable the option 'use-new-deathmessages' in Via-Version config.yml
# Since that option added death screen manually, disable it will fix the problem
instantRespawn: false

# Use the old style enchanting from pre-1.7
# That has no lapis required, and enchanting level will randomly picked after refresh
# In 1.8+ client they will automatically receive lapis in enchanting table
# As a visual item in order for client to enchant without problems.
oldEnchanting: false

# Should the AI of the entities be enabled?
# Set this to false will override every API usages (MobAIHandler & MobGoal)
# This option can be toggled in-game thanks to /mobai command from the spigot
mobAI: true

# In Minecraft 1.7 and 1.8
# Carpet block has different behaviour
# Which in 1.7 carpet is 0 height and 1.8 is 1/16 of block height
# This will enforce block to be zero height in any version.
# If you seen any false ban from anti-cheat related to carpet, try disabling it.
zeroHeightCarpets: true

# Should Vanish Patch enabled?
# Vanish patch will made everything from hidden player to be invisible from the receive player's vision
# Including every potion, item, arrow and projectile shooting by the hidden player will not appear
# This feature is very useful for Practice Plugin that can work for 1 arena multiple matches.
#  
# IMPORTANT: Block break & place and Entity spawned by hidden player will still be visible
vanishPatch: true

# Should TCPNoDelay be enable?
tcpNoDelay: true

# Should entity collisions be enable?
# While disabling entity collision, that means collision detection on move to entity will be disabled
# So in this case, If you have a lot of entity in same region
# You will get significant performance boost
entityCollisions: true

# Should players need permission to tab the /version command? (Permission: bukkit.command.version.tab)
permissionToTabVersion: true

# Should enable Entity Movement Cache?
# Entity Movement Cache is the system that will cache entities movement data
# And re-use it if the movement information is exactly the same
entityMovementCache: false

# Support for https://timin.gs/
# timin.gs is a fork of aikar's timings
# It provides better UI and flexibility
timinGsSupport: true

# Ability to save player's information like health, hunger inventory etc
# By vanilla it's enabled
# If you disabled it everytime the player joined the server
# Server will see the player as fresh new player
shouldSavePlayerData: true

# Should Player Data Saving be Asynchronous?
# Player Data Saving was used to be in Main Thread
# Doing it in Asynchronous could save a little of performance.
asyncPlayerDataLoadingAndSaving: true

# Should Player Data be cached in memory when it saved?
# If this option is enabled
# Server will have the ability to search data from cache when loading
# Reduce the time trying to search from file.
cachingPlayerData: false

# This option will use Panda Redstone algorithm by md_5
# Which is a heavy optimised version of vanilla redstone algorithm
betterRedstoneAlgorithm: true

# Light Random Algorithm is a much faster algorithm compare to old Java Random algorithm
# But while using it, It might break minecraft original seed generation
# Chunk generation seed will be different to vanilla
lightRandomAlgorithm: true

# What's the maximum possible NBT data can player send to the server?Vanilla's limit used to be 2097152, which is 2MBIt's a significant amount where most of players wouldn't be able to sentUnless they are using some hack client attempts to crash the server.
nbtPacketLimit: 51200

# By default in minecraft you can only send messages of 100 characters in chat
# But many modified clients allow you to send more.
# Enabling this option will allow clients to send messages with a 256 character limit instead of 100
upTo256CharsInChat: false

# In regular spigot 1.8 there is a 'bug' also called 'NoDelayFood'.
# This is caused when you eat and drop item at the same time which can cause unexpected things like
# Eating while sprinting or eating while doing nothing.
# Enabling this option will make this glitch not working anymore.
eatAndDropFix: false

# Should the server be processing packets while sleeping?
# Normally packets are stacked into a queue
# And flush the queue at once at the starting of the tick.
# That means at maximum a packet can be delayed up to 50ms
# Which can be noticeable for competitive gameplay.
#  
# This will try to process packet whenever server is free to minimize the delay of packets.
# Disadvantage: this may cause higher cpu usage.
processPacketWhileSleeping: true

# Here you can configure the optimizations about cannoning/tnt/explosions
cannonOptimizations:

  # Some complex cannons used by some players need some redstone blocks not to be destroyed when water flows over.
  # This option makes some blocks (redstone, buttons etc...) resistant to water flow
  # And unlocks many cannon possibilities for your players.
  # Note: this do not offer performance boost to your server, this option just give more gameplay possibilities for cannoning.
  isEssentialRedstoneWaterProof: false

  # This section allow you to edit how the merging system work
  # The merging system destroys the TNT entities considered 'useless' according to the configurable options below.
  # This will allow the server to have to manage fewer entities and therefore to handle with better performance the explosions on the server.
  # Note that editing a lot the default (options) values can in some cases, cause the most complex cannons to malfunction.
  merge:
    enabled: false
    maxTime: 1.15
    size: 0.15

# Configurations about Projectiles Behaviours
projectiles:

  # Configuration about Snowball projectile
  snowball:

    # Should Snowball have the ability to go through an opening Fence Gate?
    snowBallThroughFenceGate: false

    # Should Snowball have the ability to go through a Tripwire?
    # Note that a Tripwire is not a Tripwire Hook.
    # Tripwire is a string as block (string placed).
    snowballThroughTripwire: false

    # Should Snowball have the ability to go through a Cobweb?
    snowballThroughCobweb: false

  # Configuration about Egg projectile
  egg:

    # Should Egg have the ability to go through an opening Fence Gate?
    eggThroughFenceGate: false

    # Should Egg have the ability to go through a Tripwire?
    # Note that a Tripwire is not a Tripwire Hook.
    # Tripwire is a string as block (string placed).
    eggThroughTripwire: false

    # Should Egg have the ability to go through a Cobweb?
    eggThroughCobweb: false

    # Should Egg hatching when throw?
    hatching: false

# Configurations about Ender Pearl Behaviours
enderPearl:

  # Should Ender Pearl have to ability to go through an opening Fence Gate?
  throughFenceGate: false

  # Should Ender Pearl have to ability to go through a Tripwire?
  # Note that a Tripwire is not a Tripwire Hook.
  # Tripwire is a string as block (string placed).
  throughTripwire: false

  # Should Ender Pearl have to ability to go through a Cobweb?
  throughCobweb: false

  # Should Ender Pearl spawns Endermite?
  spawnEndermite: false

  # Tali Pearl is a kind of mechanism that you can pearl through blocks in certain situation 
  # and move you to smooth position so you won't get stuck in blocks
  # Example: https://www.youtube.com/watch?v=XX4-AzyxwTE
  taliPearl:

    # Should tali pearl be enabled?
    enabled: false

    # Allow slabs to execute Tali Pearl behaviour
    slabCanThrough: true

    # Allow stairs to execute Tali Pearl behaviour
    stairsCanThrough: true

    # Other Block types that are allowed to execute Tali Pearl behaviour
    blockCanThrough:
    - ENCHANTMENT_TABLE
    - ENDER_PORTAL_FRAME

    # This is a value to determine is Player attempting to perform tali pearl
    # The higher the value is, the more straight the pearl should be shoot
    horizontalMotionTali: 0.05

  # The AntiGlitch system for Ender Pearls
  # It will cache valid position every tick Ender Pearl move
  # And use the last cached valid position for teleportation.
  antiGlitch:

    # Should tali pearl be enabled?
    enabled: false

    # Prevent Ender Pearl from Suffocating to blocks.
    antiSuffocation: false

    # If Pearl's current position is a part of prohibited pearl blocks
    # The position will not be determined as valid position.
    prohibitedPearlBlocks:
    - FENCE
    - FENCE_GATE

# The Compression Type for Chunk Region files
# Existing types:
# GZIP - The very old compression type from very old minecraft, Slowest and not really recommended
# ZLIB - The latest compression library used by minecraft, The default compression library on 1.8, Not the best compression library but best compatibility for Minecraft World
# ZSTD - The new compression library, It's the best compression library but the world will only work with ImanitySpigot, Very recommended if you are building your server from ground up with ImanitySpigot
# NONE - No compression library, No compression time waste but the region file will be extremely big, VERY not recommended
compressType: ZLIB

# Asynchronous Entity AI Path Searching
asyncPathSearching:

  # Should enable Asynchronous Entity AI Path Searching?
  enabled: true

  # How much threads do you want for Path Searching?
  pathSearchThreads: 2

# Asynchronous Chunk Load and Terrain Generation
# Terrain Generation is the first stage of Minecraft Chunk Generation

# This option will completely separate load and generation off from main thread
# Provide Significant performance boost.
asyncChunkLoads:

  # Should enable Asynchronous Chunk Load/Terrain Generation?
  enabled: true

  # Should let Generation happen in Asynchronous?
  asyncChunkGeneration: true

  # Should separate threads for chunk per world?
  chunkGeneratePerWorld: true

  # How much threads do you want for Chunk Loading?
  chunkLoadThreads: 3

  # How much threads do you want for Chunk Generating?
  # THIS OPTION IS VERY EXPERIMENTAL.
  chunkGenerateThreads: 2

  # Should we include the process of lighting calculation within async chunk generation?
  # This option will made chunk generation much more stable
  # But at the same time it will slow down generation speed
  # This option will not affect server performance
  includingLighting: true

  # The range in chunks around spawn to keep loaded
  keepSpawnLoadedRange: 8

  # Should wait for chunks to load on start or bukkit world creating?
  waitForChunks: true

# Asynchronous Lighting Updates
# Minecraft always had a task to update lighting based on sky light or block light
# But when the task stack up, It could cause potential lag spikes
# By enabling Async Lighting would solve the issue
#  
# But Keep in mind, Async Lighting could cause entity not being spawned or not spawning correctly
# Since Lighting Update isn't forced to update instead it will update when it's ready and async task finished
# And before Lighting Update completed Minecraft wouldn't let the chunk spawn mobs naturally.
asyncLightUpdates:

  # Should enable async lighting updates?
  enabled: false

# Asynchronous Chunk Unload
asyncChunkUnload:
  enabled: true
  threads: 2

# Parallel Entity Track Processing
# Entity Tracking is the way minecraft send entity data to players
# Letting Player's Client know each entity's location and their information
#  
# But by default, Entity Track was process with in Main Thread
# Which means when there is large amount of entity processing, It could cause the server lag
#  
# What we do now is we made it into a thread safe structure
# And when minecraft server called to do entity tracking update
# We will block the main thread and start assign work to each parallel threads
# This is be significant performance boost if you have large amount of entities.
parallelEntityTracking:

  # Should enable Parallel Entity Tracking?
  enabled: true

  # How much thread do you want for Entity Tracking?
  entityTrackerThreads: 4

# EXPERIMENTAL FEATURES
#  
# Should we use server side hit detection?
serverSideHitDetection:

  # Should server side hit detection be enabled?
  enabled: false

  # How far can player reach to hit victims?
  reach: 3.0

  # The offset to rollback positions for ping difference
  lagPingOffset: 100

# The built-in book exploit crash
bookExploitPatch:

  # What's the maximum possible pages player can write?
  maxBookPages: 2560

  # The multiplier for amount of bytes allowed to write per page
  maxBookTotalSizeMultiplier: 0.98
